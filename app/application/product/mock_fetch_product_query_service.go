// Code generated by MockGen. DO NOT EDIT.
// Source: fetch_product_query_service.go

// Package product is a generated GoMock package.
package product

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFetchProductQueryService is a mock of FetchProductQueryService interface.
type MockFetchProductQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockFetchProductQueryServiceMockRecorder
}

// MockFetchProductQueryServiceMockRecorder is the mock recorder for MockFetchProductQueryService.
type MockFetchProductQueryServiceMockRecorder struct {
	mock *MockFetchProductQueryService
}

// NewMockFetchProductQueryService creates a new mock instance.
func NewMockFetchProductQueryService(ctrl *gomock.Controller) *MockFetchProductQueryService {
	mock := &MockFetchProductQueryService{ctrl: ctrl}
	mock.recorder = &MockFetchProductQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchProductQueryService) EXPECT() *MockFetchProductQueryServiceMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockFetchProductQueryService) Run(ctx context.Context) ([]*FetchProductQueryServiceDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].([]*FetchProductQueryServiceDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockFetchProductQueryServiceMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockFetchProductQueryService)(nil).Run), ctx)
}
