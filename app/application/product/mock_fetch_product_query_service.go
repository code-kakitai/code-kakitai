// Code generated by MockGen. DO NOT EDIT.
// Source: fetch_product_query_service.go

// Package product is a generated GoMock package.
package product

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProductQueryService is a mock of ProductQueryService interface.
type MockProductQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockProductQueryServiceMockRecorder
}

// MockProductQueryServiceMockRecorder is the mock recorder for MockProductQueryService.
type MockProductQueryServiceMockRecorder struct {
	mock *MockProductQueryService
}

// NewMockProductQueryService creates a new mock instance.
func NewMockProductQueryService(ctrl *gomock.Controller) *MockProductQueryService {
	mock := &MockProductQueryService{ctrl: ctrl}
	mock.recorder = &MockProductQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductQueryService) EXPECT() *MockProductQueryServiceMockRecorder {
	return m.recorder
}

// FetchProductList mocks base method.
func (m *MockProductQueryService) FetchProductList(ctx context.Context) ([]*FetchProductListDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProductList", ctx)
	ret0, _ := ret[0].([]*FetchProductListDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProductList indicates an expected call of FetchProductList.
func (mr *MockProductQueryServiceMockRecorder) FetchProductList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProductList", reflect.TypeOf((*MockProductQueryService)(nil).FetchProductList), ctx)
}
