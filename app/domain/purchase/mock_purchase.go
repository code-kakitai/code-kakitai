// Code generated by MockGen. DO NOT EDIT.
// Source: purchase.go

// Package purchase is a generated GoMock package.
package purchase

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockPurchaseDomainService is a mock of PurchaseDomainService interface.
type MockPurchaseDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseDomainServiceMockRecorder
}

// MockPurchaseDomainServiceMockRecorder is the mock recorder for MockPurchaseDomainService.
type MockPurchaseDomainServiceMockRecorder struct {
	mock *MockPurchaseDomainService
}

// NewMockPurchaseDomainService creates a new mock instance.
func NewMockPurchaseDomainService(ctrl *gomock.Controller) *MockPurchaseDomainService {
	mock := &MockPurchaseDomainService{ctrl: ctrl}
	mock.recorder = &MockPurchaseDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseDomainService) EXPECT() *MockPurchaseDomainServiceMockRecorder {
	return m.recorder
}

// PurchaseProducts mocks base method.
func (m *MockPurchaseDomainService) PurchaseProducts(ctx context.Context, userID string, pps []PurchaseProduct, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseProducts", ctx, userID, pps, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurchaseProducts indicates an expected call of PurchaseProducts.
func (mr *MockPurchaseDomainServiceMockRecorder) PurchaseProducts(ctx, userID, pps, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseProducts", reflect.TypeOf((*MockPurchaseDomainService)(nil).PurchaseProducts), ctx, userID, pps, now)
}
