// Code generated by MockGen. DO NOT EDIT.
// Source: purchase_history_repository.go

// Package purchase is a generated GoMock package.
package purchase

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPurchaseHistoryRepository is a mock of PurchaseHistoryRepository interface.
type MockPurchaseHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseHistoryRepositoryMockRecorder
}

// MockPurchaseHistoryRepositoryMockRecorder is the mock recorder for MockPurchaseHistoryRepository.
type MockPurchaseHistoryRepositoryMockRecorder struct {
	mock *MockPurchaseHistoryRepository
}

// NewMockPurchaseHistoryRepository creates a new mock instance.
func NewMockPurchaseHistoryRepository(ctrl *gomock.Controller) *MockPurchaseHistoryRepository {
	mock := &MockPurchaseHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockPurchaseHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseHistoryRepository) EXPECT() *MockPurchaseHistoryRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockPurchaseHistoryRepository) Save(ctx context.Context, history *PurchaseHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockPurchaseHistoryRepositoryMockRecorder) Save(ctx, history interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPurchaseHistoryRepository)(nil).Save), ctx, history)
}
