// Code generated by MockGen. DO NOT EDIT.
// Source: order.go

// Package order is a generated GoMock package.
package order

import (
	context "context"
	cart "github/code-kakitai/code-kakitai/domain/cart"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderDomainService is a mock of OrderDomainService interface.
type MockOrderDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderDomainServiceMockRecorder
}

// MockOrderDomainServiceMockRecorder is the mock recorder for MockOrderDomainService.
type MockOrderDomainServiceMockRecorder struct {
	mock *MockOrderDomainService
}

// NewMockOrderDomainService creates a new mock instance.
func NewMockOrderDomainService(ctrl *gomock.Controller) *MockOrderDomainService {
	mock := &MockOrderDomainService{ctrl: ctrl}
	mock.recorder = &MockOrderDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderDomainService) EXPECT() *MockOrderDomainServiceMockRecorder {
	return m.recorder
}

// OrderProducts mocks base method.
func (m *MockOrderDomainService) OrderProducts(ctx context.Context, cart *cart.Cart, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderProducts", ctx, cart, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderProducts indicates an expected call of OrderProducts.
func (mr *MockOrderDomainServiceMockRecorder) OrderProducts(ctx, cart, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderProducts", reflect.TypeOf((*MockOrderDomainService)(nil).OrderProducts), ctx, cart, now)
}
