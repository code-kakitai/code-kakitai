// Code generated by MockGen. DO NOT EDIT.
// Source: purchase_history_repository.go

// Package order is a generated GoMock package.
package order

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderHistoryRepository is a mock of OrderHistoryRepository interface.
type MockOrderHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderHistoryRepositoryMockRecorder
}

// MockOrderHistoryRepositoryMockRecorder is the mock recorder for MockOrderHistoryRepository.
type MockOrderHistoryRepositoryMockRecorder struct {
	mock *MockOrderHistoryRepository
}

// NewMockOrderHistoryRepository creates a new mock instance.
func NewMockOrderHistoryRepository(ctrl *gomock.Controller) *MockOrderHistoryRepository {
	mock := &MockOrderHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockOrderHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderHistoryRepository) EXPECT() *MockOrderHistoryRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockOrderHistoryRepository) Save(ctx context.Context, history *Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockOrderHistoryRepositoryMockRecorder) Save(ctx, history interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockOrderHistoryRepository)(nil).Save), ctx, history)
}
