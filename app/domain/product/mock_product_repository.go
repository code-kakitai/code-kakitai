// Code generated by MockGen. DO NOT EDIT.
// Source: product_repository.go

// Package product is a generated GoMock package.
package product

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockProductRepository) FindByID(ctx context.Context, id string) (*Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockProductRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockProductRepository)(nil).FindByID), ctx, id)
}

// FindByIDs mocks base method.
func (m *MockProductRepository) FindByIDs(ctx context.Context, ids []string) ([]*Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", ctx, ids)
	ret0, _ := ret[0].([]*Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockProductRepositoryMockRecorder) FindByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockProductRepository)(nil).FindByIDs), ctx, ids)
}

// FindByOwnerID mocks base method.
func (m *MockProductRepository) FindByOwnerID(ctx context.Context, ownerID string) ([]*Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOwnerID", ctx, ownerID)
	ret0, _ := ret[0].([]*Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOwnerID indicates an expected call of FindByOwnerID.
func (mr *MockProductRepositoryMockRecorder) FindByOwnerID(ctx, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOwnerID", reflect.TypeOf((*MockProductRepository)(nil).FindByOwnerID), ctx, ownerID)
}

// Save mocks base method.
func (m *MockProductRepository) Save(ctx context.Context, product *Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockProductRepositoryMockRecorder) Save(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProductRepository)(nil).Save), ctx, product)
}
