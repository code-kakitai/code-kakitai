// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: order_product.sql

package dbgen

import (
	"context"
)

const insertOrderProduct = `-- name: InsertOrderProduct :exec
INSERT INTO
  order_products (
      id,
      order_id,
      product_id,
      price,
      quantity
  )
VALUES
  (
      ?,
      ?,
      ?,
      ?,
      ?
  )
`

type InsertOrderProductParams struct {
	ID        string `json:"id"`
	OrderID   string `json:"order_id"`
	ProductID string `json:"product_id"`
	Price     int64  `json:"price"`
	Quantity  int32  `json:"quantity"`
}

func (q *Queries) InsertOrderProduct(ctx context.Context, arg InsertOrderProductParams) error {
	_, err := q.db.ExecContext(ctx, insertOrderProduct,
		arg.ID,
		arg.OrderID,
		arg.ProductID,
		arg.Price,
		arg.Quantity,
	)
	return err
}

const orderProductFindById = `-- name: OrderProductFindById :one
SELECT
  id, order_id, product_id, price, quantity, created_at, updated_at
FROM
  order_products
WHERE
  id = ?
`

func (q *Queries) OrderProductFindById(ctx context.Context, id string) (OrderProduct, error) {
	row := q.db.QueryRowContext(ctx, orderProductFindById, id)
	var i OrderProduct
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
