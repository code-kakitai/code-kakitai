// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: user.sql

package dbgen

import (
	"context"
	"time"
)

const fetchByUserId = `-- name: FetchByUserId :one
SELECT
   id,
   email,
   phone_number,
   name,
   postal_code,
   prefecture,
   city,
   address_extra,
   created_at,
   updated_at
FROM
   users
WHERE id = ?
`

type FetchByUserIdRow struct {
	ID           string    `json:"id"`
	Email        string    `json:"email"`
	PhoneNumber  string    `json:"phone_number"`
	Name         string    `json:"name"`
	PostalCode   string    `json:"postal_code"`
	Prefecture   string    `json:"prefecture"`
	City         string    `json:"city"`
	AddressExtra string    `json:"address_extra"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) FetchByUserId(ctx context.Context, id string) (FetchByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, fetchByUserId, id)
	var i FetchByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.Name,
		&i.PostalCode,
		&i.Prefecture,
		&i.City,
		&i.AddressExtra,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
